import React from "react";
import "./Modal.css"


const Modal = ({open,onClose}) =>{
    if(!open) return null;
    return(
        <div id="overlay">
                <div onClick={(e) => {e.stopPropagation()}} id="modalContrainer">
                    <button onClick={onClose} id="close-modal-btn">X</button>
                    <h1 id="regex_head"> Regular Expression </h1>
                    <div className="container-scroll">
                        <div className="regex_content">
                            <div className="image_1">
                                {/* <image> */}
                            </div>
                            <p>
                            1. บรรทัดแรกเป็นการดึง HTML element ของหน้าเว็บที่เราต้องการ
                            บรรทัดที่สองเป็นการกำหนด pattern โดยมีความหมายว่าให้เก็บชุดตัวอักษรที่ขึ้นต้นด้วย ‘&lt;main’ ลงท้ายด้วย ‘id=“ดูเพิ่ม”&gt;ดูเพิ่ม&lt;/span&gt;’ โดยมีเงื่อนไขคือ ‘[\u0000-\uFFFF]’ หมายถึงให้เก็บตัวอักษร Unicode ในช่วง 
                            \u0000-\uFFFF และ ‘*’ หมายถึงเก็บตัวอักษรกี่ตัวก็ได้ตั้งแต่ 0 ตัวขึ้นไปบรรทัดที่สามเป็นการสั่งให้ค้นหาตัวอักษรที่ตรงกับ pattern จาก data.text 
                            </p><br/>
                            <div className="image-2"></div>
                            <p>
                            2. บรรทัดแรกเป็นการกำหนด pattern โดย pattern นี้มีความหมายว่าเลือกเก็บชุดตัวอักษรที่ขึ้นต้นด้วย ‘&lt;li&gt;’ และลงท้ายด้วย ‘&lt;/li&gt;’ โดยมีเงื่อนไขคือ ‘.’ หมายถึงให้เก็บตัวอักษรใดๆก็ตามยกเว้น newline character (‘\n’) และ ‘*’ หมายถึงเก็บตัวอักษรกี่ตัวก็ได้ตั้งแต่ 0 ตัวขึ้นไป
                            บรรทัดที่สองเป็นการเรียกใช้ pattern จากบรรทัดแรก โดยหาจาก Result ข้อก่อนหน้าที่ถูกเชื่อมด้วย ‘\n’ ระหว่างสมาชิกแต่ละตัว
                            </p><br/>
                            <p>
                            3. เป็นการแทนที่ส่วนที่ขึ้นต้นด้วย ‘&lt;’ แล้วลงท้ายด้วย ‘&gt;’ ด้วย empty string (‘’) โดยส่วน ‘&lt;.*?&gt;’ มีความหมายคือชุดตัวอักษรที่ขึ้นต้นด้วย ‘&lt;’ ลงท้ายด้วย ‘&gt;’ โดยมีเงื่อนไขคือ ‘.’ หมายถึงให้เก็บตัวอักษรใดๆก็ตามยกเว้น newline character (‘\n’), ‘*’   
                            หมายถึงเก็บตัวอักษรกี่ตัวก็ได้ตั้งแต่ 0 ตัวขึ้นไป และ ‘?’ หมายถึงให้ค้นหาแบบ non-greedy โดยหาจาก Result ข้อก่อนหน้าที่ถูกเชื่อมด้วย ‘\n’ ระหว่างสมาชิกแต่ละตัว
                            </p><br/>
                            <p>
                            4. บรรทัดแรกเป็นการกำหนด pattern โดย pattern นี้มีความหมายว่าเลือกเก็บชุดอักษรที่ขึ้นต้นด้วย ‘วัด’ โดยมีเงื่อนไขคือ ‘.’ หมายถึงให้เก็บตัวอักษรใดๆก็ตามยกเว้น newline character 
                            (‘\n’) และ ‘*’ หมายถึงเก็บตัวอักษรกี่ตัวก็ได้ตั้งแต่ 0 ตัวขึ้นไปบรรทัดที่สองเป็นการเรียกใช้ pattern จากบรรทัดแรก โดยหาจาก Result ข้อก่อนหน้า
                            </p><br/>
                            <p>
                            5. เป็นการแทนที่ส่วนตั้งแต่ ‘ ตำบล’ ลงไป ด้วย empty string (‘’) โดยส่วน ‘ ตำบล.*’ มีความหมายคือชุดตัวอักษรที่ขึ้นต้นด้วย ‘ ตำบล’  โดยมีเงื่อนไขคือ ‘.’ หมายถึงให้เก็บตัวอักษรใดๆก็ตามยกเว้น newline character 
                            (‘\n’), ‘*’ หมายถึงเก็บตัวอักษรกี่ตัวก็ได้ตั้งแต่ 0 ตัวขึ้นไป จาก Result ในข้อก่อนหน้าที่ถูกเชื่อมด้วย ‘\n’ ระหว่างสมาชิกแต่ละตัว
                            </p><br/>
                            <p>
                            6. เป็นการแทนที่ส่วน ’มติ’ ด้วย empty string (‘’) โดยส่วน ‘มติ.*’ มีความหมายคือชุดตัวอักษรที่ขึ้นต้นด้วย ‘มติ’  โดยมีเงื่อนไขคือ ‘.’ หมายถึงให้เก็บตัวอักษรใดๆก็ตามยกเว้น newline character 
                            (‘\n’), ‘*’ หมายถึงเก็บตัวอักษรกี่ตัวก็ได้ตั้งแต่ 0 ตัวขึ้นไป จาก Result ในข้อก่อนหน้า                     
                            </p><br/>
                            <p>
                            7. เป็นการแทนที่ส่วนก่อนหน้า ’ วัด’ ด้วย empty string (‘’) โดยส่วน ‘.* วัด’ มีความหมายคือชุดตัวอักษรที่ลงท้าย ‘ วัด’  โดยมีเงื่อนไขคือ ‘.’ หมายถึงให้เก็บตัวอักษรใดๆก็
                            ตามยกเว้น newline character (‘\n’), ‘*’ หมายถึงเก็บตัวอักษรกี่ตัวก็ได้ตั้งแต่ 0 ตัวขึ้นไป จาก Result ในข้อก่อนหน้า                            
                            </p><br/>
                            <p>
                            8. เป็นการแทนที่ส่วนที่ขึ้นต้นด้วย ’\n’ และตามด้วยภาษาอังกฤษพิมพ์เล็กพิมพ์ใหญ่ เลข 0-9 หรือตัวอักษร ./:=?;&]+ ด้วย empty string (‘’) โดยส่วน 
                            ‘\n[a-zA-Z0-9./:=?;&]+]’ มีความหมายคือชุดตัวอักษรที่ขึ้นต้นด้วย ‘\n’ และตามด้วยภาษาอังกฤษพิมพ์เล็กพิมพ์ใหญ่ เลข 0-9 หรือตัวอักษร ./:=?;&]+ โดยหาจาก Result ข้อก่อนหน้า                            
                            </p><br/>
                            <p>
                            9. เป็นการแทนที่ส่วนที่ขึ้นต้นด้วย ‘(‘ และลงท้ายด้วย ‘)’ ด้วย empty string (‘’) โดยส่วน ‘\(.*?\)’ มีความหมายคือชุดตัวอักษรที่ขึ้นต้นด้วย ‘(’ ลงท้ายด้วย ‘)’ 
                            โดยมีเงื่อนไขคือ ‘.’ หมายถึงให้เก็บตัวอักษรใดๆก็ตามยกเว้น newline character (‘\n’), ‘*’ หมายถึงเก็บตัวอักษรกี่ตัวก็ได้ตั้งแต่ 0 ตัวขึ้นไป และ ‘?’ หมายถึงให้ค้นหาแบบ non-greedy โดยหาจาก Result ข้อก่อนหน้า
                            </p><br/>
                        </div>
                    </div>  
                </div>
        </div>
    )
}

export default Modal;